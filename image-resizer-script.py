#!/usr/bin/env python3
"""
Image Batch Resizer
–ó–º–µ–Ω—à—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ 1280x720 –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —è–∫–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
"""

import os
from PIL import Image
from pathlib import Path
from typing import List, Tuple

class ImageResizer:
    def __init__(self, target_width=1280, target_height=720):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Å–∞–π–∑–µ—Ä–∞
        
        Args:
            target_width: –®–∏—Ä–∏–Ω–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            target_height: –í–∏—Å–æ—Ç–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        """
        self.target_width = target_width
        self.target_height = target_height
        self.target_ratio = target_width / target_height
        
    def resize_image_contain(self, image_path: str, output_path: str, 
                            bg_color=(0, 0, 0)) -> bool:
        """
        –ó–º–µ–Ω—à—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π (–∑ padding)
        –í–º—ñ—â—É—î –≤—Å–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–¥–∞—é—á–∏ –ø–æ–ª—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        
        Args:
            image_path: –®–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            bg_color: –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É (—á–æ—Ä–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            img = Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if img.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', img.size, bg_color)
                if img.mode == 'P':
                    img = img.convert('RGBA')
                background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –û–±—á–∏—Å–ª—é—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
            img_ratio = img.width / img.height
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
            if img_ratio > self.target_ratio:
                # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —à–∏—Ä—à–µ –Ω—ñ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                new_width = self.target_width
                new_height = int(self.target_width / img_ratio)
            else:
                # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏—â–µ –Ω—ñ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                new_height = self.target_height
                new_width = int(self.target_height * img_ratio)
            
            # –ó–º–µ–Ω—à—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∏—Å–æ–∫–æ—é —è–∫—ñ—Å—Ç—é
            img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ü—ñ–ª—å–æ–≤–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º
            new_img = Image.new('RGB', (self.target_width, self.target_height), bg_color)
            
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –∑–º–µ–Ω—à–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            paste_x = (self.target_width - new_width) // 2
            paste_y = (self.target_height - new_height) // 2
            new_img.paste(img_resized, (paste_x, paste_y))
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ –≤–∏—Å–æ–∫–æ—é —è–∫—ñ—Å—Ç—é
            new_img.save(output_path, 'JPEG', quality=95, optimize=True)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {image_path}: {e}")
            return False
    
    def resize_image_cover(self, image_path: str, output_path: str) -> bool:
        """
        –ó–º–µ–Ω—à—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω—é—é—á–∏ –≤–µ—Å—å –∫–∞–¥—Ä (–º–æ–∂–µ –æ–±—Ä—ñ–∑–∞—Ç–∏ –∫—Ä–∞—ó)
        
        Args:
            image_path: –®–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            img = Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –û–±—á–∏—Å–ª—é—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
            img_ratio = img.width / img.height
            
            # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ —â–æ–± –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤–µ—Å—å –∫–∞–¥—Ä
            if img_ratio > self.target_ratio:
                # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —à–∏—Ä—à–µ - –º–∞—Å—à—Ç–∞–±—É—î–º–æ –ø–æ –≤–∏—Å–æ—Ç—ñ
                new_height = self.target_height
                new_width = int(self.target_height * img_ratio)
            else:
                # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏—â–µ - –º–∞—Å—à—Ç–∞–±—É—î–º–æ –ø–æ —à–∏—Ä–∏–Ω—ñ
                new_width = self.target_width
                new_height = int(self.target_width / img_ratio)
            
            # –ó–º–µ–Ω—à—É—î–º–æ
            img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É (—Ü–µ–Ω—Ç—Ä—É—î–º–æ)
            left = (new_width - self.target_width) // 2
            top = (new_height - self.target_height) // 2
            right = left + self.target_width
            bottom = top + self.target_height
            
            img_cropped = img_resized.crop((left, top, right, bottom))
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            img_cropped.save(output_path, 'JPEG', quality=95, optimize=True)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {image_path}: {e}")
            return False
    
    def process_folder(self, input_folder: str, output_folder: str = None, 
                      mode: str = 'contain', bg_color=(0, 0, 0)) -> Tuple[int, int]:
        """
        –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø–∞–ø—Ü—ñ
        
        Args:
            input_folder: –ü–∞–ø–∫–∞ –∑ –≤—Ö—ñ–¥–Ω–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
            output_folder: –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (—Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
            mode: 'contain' (–∑ –ø–æ–ª—è–º–∏) –∞–±–æ 'cover' (–±–µ–∑ –ø–æ–ª—ñ–≤)
            bg_color: –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É –¥–ª—è —Ä–µ–∂–∏–º—É contain
        
        Returns:
            (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫)
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ output –ø–∞–ø–∫—É
        if output_folder is None:
            output_folder = os.path.join(input_folder, 'resized')
        
        Path(output_folder).mkdir(parents=True, exist_ok=True)
        
        # –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
        supported_formats = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp'}
        
        # –®—É–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        input_path = Path(input_folder)
        image_files = [
            f for f in input_path.iterdir() 
            if f.is_file() and f.suffix.lower() in supported_formats
        ]
        
        if not image_files:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏!")
            return 0, 0
        
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print(f"üéØ –¶—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä: {self.target_width}x{self.target_height}")
        print(f"üîß –†–µ–∂–∏–º: {mode}")
        print(f"üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤: {output_folder}")
        print("-" * 50)
        
        success_count = 0
        error_count = 0
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        for i, image_file in enumerate(image_files, 1):
            output_file = os.path.join(output_folder, f"{image_file.stem}_resized.jpg")
            
            print(f"[{i}/{len(image_files)}] –û–±—Ä–æ–±–∫–∞: {image_file.name}...", end=' ')
            
            if mode == 'contain':
                success = self.resize_image_contain(str(image_file), output_file, bg_color)
            else:
                success = self.resize_image_cover(str(image_file), output_file)
            
            if success:
                success_count += 1
                print("‚úÖ")
            else:
                error_count += 1
                print("‚ùå")
        
        print("-" * 50)
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {success_count}")
        if error_count > 0:
            print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {error_count}")
        print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_folder}")
        
        return success_count, error_count


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("=" * 60)
    print("üñºÔ∏è  IMAGE BATCH RESIZER")
    print("=" * 60)
    print()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    print("‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
    print("   –¶—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä: 1280 x 720")
    print()
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
    input_folder = input("üìÅ –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏: ").strip()
    
    if not os.path.exists(input_folder):
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É
    print()
    print("üîß –í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:")
    print("   1. CONTAIN - –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–¥–∞—î —á–æ—Ä–Ω—ñ –ø–æ–ª—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
    print("   2. COVER - –ó–∞–ø–æ–≤–Ω—é—î –≤–µ—Å—å –∫–∞–¥—Ä, –º–æ–∂–µ –æ–±—Ä—ñ–∑–∞—Ç–∏ –∫—Ä–∞—ó")
    
    mode_choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1 –∞–±–æ 2): ").strip()
    mode = 'contain' if mode_choice != '2' else 'cover'
    
    # –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É –¥–ª—è contain —Ä–µ–∂–∏–º—É
    bg_color = (0, 0, 0)  # –ß–æ—Ä–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if mode == 'contain':
        print()
        print("üé® –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É (–¥–ª—è –ø–æ–ª—ñ–≤):")
        print("   1. –ß–æ—Ä–Ω–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("   2. –ë—ñ–ª–∏–π")
        print("   3. –°—ñ—Ä–∏–π")
        color_choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1, 2 –∞–±–æ 3): ").strip()
        
        if color_choice == '2':
            bg_color = (255, 255, 255)
        elif color_choice == '3':
            bg_color = (128, 128, 128)
    
    print()
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏...")
    print()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ resizer —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ
    resizer = ImageResizer(1280, 720)
    success, errors = resizer.process_folder(input_folder, mode=mode, bg_color=bg_color)
    
    print()
    print("=" * 60)
    print("üéâ –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")


if __name__ == "__main__":
    main()