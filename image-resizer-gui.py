#!/usr/bin/env python3
"""
Image Batch Resizer GUI
–ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω—å
"""

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
from pathlib import Path
import threading


class ImageResizerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üñºÔ∏è Image Batch Resizer")
        self.root.geometry("700x600")
        self.root.resizable(False, False)
        
        # –ó–º—ñ–Ω–Ω—ñ
        self.input_folder = tk.StringVar()
        self.output_folder = tk.StringVar()
        self.mode = tk.StringVar(value='contain')
        self.bg_color = tk.StringVar(value='black')
        self.target_width = tk.IntVar(value=1280)
        self.target_height = tk.IntVar(value=720)
        
        self.processing = False
        
        self.setup_ui()
    
    def setup_ui(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(self.root, bg='#2c3e50', height=80)
        header.pack(fill='x')
        header.pack_propagate(False)
        
        title_label = tk.Label(
            header, 
            text="üñºÔ∏è IMAGE BATCH RESIZER",
            font=('Arial', 20, 'bold'),
            fg='white',
            bg='#2c3e50'
        )
        title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, padx=20, pady=20)
        main_frame.pack(fill='both', expand=True)
        
        # –°–µ–∫—Ü—ñ—è 1: –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.LabelFrame(main_frame, text="üìÅ –ü–∞–ø–∫–∏", padding=15)
        folder_frame.pack(fill='x', pady=(0, 15))
        
        # –í—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞
        input_label = ttk.Label(folder_frame, text="–í—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞:")
        input_label.grid(row=0, column=0, sticky='w', pady=5)
        
        input_entry = ttk.Entry(folder_frame, textvariable=self.input_folder, width=50)
        input_entry.grid(row=0, column=1, padx=10, pady=5)
        
        input_btn = ttk.Button(folder_frame, text="–í–∏–±—Ä–∞—Ç–∏", command=self.select_input_folder)
        input_btn.grid(row=0, column=2, pady=5)
        
        # –í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞
        output_label = ttk.Label(folder_frame, text="–í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞:")
        output_label.grid(row=1, column=0, sticky='w', pady=5)
        
        output_entry = ttk.Entry(folder_frame, textvariable=self.output_folder, width=50)
        output_entry.grid(row=1, column=1, padx=10, pady=5)
        
        output_btn = ttk.Button(folder_frame, text="–í–∏–±—Ä–∞—Ç–∏", command=self.select_output_folder)
        output_btn.grid(row=1, column=2, pady=5)
        
        # –°–µ–∫—Ü—ñ—è 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", padding=15)
        settings_frame.pack(fill='x', pady=(0, 15))
        
        # –†–æ–∑–º—ñ—Ä
        size_label = ttk.Label(settings_frame, text="–¶—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä:")
        size_label.grid(row=0, column=0, sticky='w', pady=5)
        
        size_container = tk.Frame(settings_frame)
        size_container.grid(row=0, column=1, sticky='w', pady=5)
        
        width_entry = ttk.Entry(size_container, textvariable=self.target_width, width=8)
        width_entry.pack(side='left')
        
        x_label = ttk.Label(size_container, text=" x ")
        x_label.pack(side='left')
        
        height_entry = ttk.Entry(size_container, textvariable=self.target_height, width=8)
        height_entry.pack(side='left')
        
        # –†–µ–∂–∏–º
        mode_label = ttk.Label(settings_frame, text="–†–µ–∂–∏–º:")
        mode_label.grid(row=1, column=0, sticky='w', pady=5)
        
        mode_container = tk.Frame(settings_frame)
        mode_container.grid(row=1, column=1, sticky='w', pady=5)
        
        contain_radio = ttk.Radiobutton(
            mode_container, 
            text="Contain (–∑ –ø–æ–ª—è–º–∏)", 
            variable=self.mode, 
            value='contain'
        )
        contain_radio.pack(side='left', padx=(0, 20))
        
        cover_radio = ttk.Radiobutton(
            mode_container, 
            text="Cover (–±–µ–∑ –ø–æ–ª—ñ–≤)", 
            variable=self.mode, 
            value='cover'
        )
        cover_radio.pack(side='left')
        
        # –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É
        color_label = ttk.Label(settings_frame, text="–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É:")
        color_label.grid(row=2, column=0, sticky='w', pady=5)
        
        color_combo = ttk.Combobox(
            settings_frame, 
            textvariable=self.bg_color,
            values=['black', 'white', 'gray'],
            state='readonly',
            width=15
        )
        color_combo.grid(row=2, column=1, sticky='w', pady=5)
        
        # –°–µ–∫—Ü—ñ—è 3: –ü—Ä–æ–≥—Ä–µ—Å
        progress_frame = ttk.LabelFrame(main_frame, text="üìä –ü—Ä–æ–≥—Ä–µ—Å", padding=15)
        progress_frame.pack(fill='both', expand=True, pady=(0, 15))
        
        self.progress = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress.pack(fill='x', pady=(0, 10))
        
        self.status_text = tk.Text(progress_frame, height=10, state='disabled')
        self.status_text.pack(fill='both', expand=True)
        
        scrollbar = ttk.Scrollbar(self.status_text)
        scrollbar.pack(side='right', fill='y')
        self.status_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.status_text.yview)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É
        self.start_btn = tk.Button(
            main_frame,
            text="üöÄ –û–ë–†–û–ë–ò–¢–ò –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø",
            font=('Arial', 12, 'bold'),
            bg='#27ae60',
            fg='white',
            height=2,
            command=self.start_processing
        )
        self.start_btn.pack(fill='x')
    
    def select_input_folder(self):
        """–í–∏–±—ñ—Ä –≤—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏")
        if folder:
            self.input_folder.set(folder)
            if not self.output_folder.get():
                self.output_folder.set(os.path.join(folder, 'resized'))
    
    def select_output_folder(self):
        """–í–∏–±—ñ—Ä –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
        if folder:
            self.output_folder.set(folder)
    
    def log(self, message):
        """–î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ª–æ–≥"""
        self.status_text.config(state='normal')
        self.status_text.insert('end', message + '\n')
        self.status_text.see('end')
        self.status_text.config(state='disabled')
        self.root.update()
    
    def resize_image(self, image_path, output_path):
        """–ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É –æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            img = Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            target_w = self.target_width.get()
            target_h = self.target_height.get()
            target_ratio = target_w / target_h
            img_ratio = img.width / img.height
            
            if self.mode.get() == 'contain':
                # –†–µ–∂–∏–º contain - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if img_ratio > target_ratio:
                    new_width = target_w
                    new_height = int(target_w / img_ratio)
                else:
                    new_height = target_h
                    new_width = int(target_h * img_ratio)
                
                img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É
                bg_colors = {
                    'black': (0, 0, 0),
                    'white': (255, 255, 255),
                    'gray': (128, 128, 128)
                }
                bg = bg_colors.get(self.bg_color.get(), (0, 0, 0))
                
                new_img = Image.new('RGB', (target_w, target_h), bg)
                paste_x = (target_w - new_width) // 2
                paste_y = (target_h - new_height) // 2
                new_img.paste(img_resized, (paste_x, paste_y))
                
            else:
                # –†–µ–∂–∏–º cover - –∑–∞–ø–æ–≤–Ω—é—î–º–æ –≤–µ—Å—å –∫–∞–¥—Ä
                if img_ratio > target_ratio:
                    new_height = target_h
                    new_width = int(target_h * img_ratio)
                else:
                    new_width = target_w
                    new_height = int(target_w / img_ratio)
                
                img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                left = (new_width - target_w) // 2
                top = (new_height - target_h) // 2
                new_img = img_resized.crop((left, top, left + target_w, top + target_h))
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            new_img.save(output_path, 'JPEG', quality=95, optimize=True)
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def process_images(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        input_dir = self.input_folder.get()
        output_dir = self.output_folder.get()
        
        if not input_dir or not os.path.exists(input_dir):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –≤—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É!")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏—Ö—ñ–¥–Ω—É –ø–∞–ø–∫—É
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        # –®—É–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        supported_formats = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp'}
        image_files = [
            f for f in Path(input_dir).iterdir()
            if f.is_file() and f.suffix.lower() in supported_formats
        ]
        
        if not image_files:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å!")
            return
        
        self.log(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        self.log(f"üéØ –†–æ–∑–º—ñ—Ä: {self.target_width.get()}x{self.target_height.get()}")
        self.log(f"üîß –†–µ–∂–∏–º: {self.mode.get()}")
        self.log("=" * 50)
        
        self.progress['maximum'] = len(image_files)
        success = 0
        
        for i, img_file in enumerate(image_files, 1):
            output_file = os.path.join(output_dir, f"{img_file.stem}_resized.jpg")
            
            self.log(f"[{i}/{len(image_files)}] {img_file.name}...")
            
            if self.resize_image(str(img_file), output_file):
                success += 1
                self.log("   ‚úÖ –£—Å–ø—ñ—à–Ω–æ")
            else:
                self.log("   ‚ùå –ü–æ–º–∏–ª–∫–∞")
            
            self.progress['value'] = i
            self.root.update()
        
        self.log("=" * 50)
        self.log(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {success}/{len(image_files)}")
        self.log(f"üìÇ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_dir}")
        
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–û–±—Ä–æ–±–ª–µ–Ω–æ {success} –∑–æ–±—Ä–∞–∂–µ–Ω—å!")
        
        self.start_btn.config(state='normal', text="üöÄ –û–ë–†–û–ë–ò–¢–ò –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø")
        self.processing = False
    
    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏"""
        if self.processing:
            return
        
        self.processing = True
        self.start_btn.config(state='disabled', text="‚è≥ –û–±—Ä–æ–±–∫–∞...")
        self.status_text.config(state='normal')
        self.status_text.delete('1.0', 'end')
        self.status_text.config(state='disabled')
        self.progress['value'] = 0
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=self.process_images)
        thread.daemon = True
        thread.start()


def main():
    root = tk.Tk()
    app = ImageResizerGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()